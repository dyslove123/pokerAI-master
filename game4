#!/usr/bin/env python
# -*- coding:utf-8 -*-

import sys
import socket
import select
import copy
import re

argv = sys.argv
server_ip = argv[1]
server_port = int(argv[2])
player_ip = argv[3]
player_port = int(argv[4])
player_id = argv[5]

RECV_BUFFER = 4096

preState = 'None'
hasRaised = False
solo = False

class Card:
    """
    Poker Card
    """
    def __init__(self, card):
        self.card = card
        self.point = self.getPoint()
        self.color = card[0]

    def getPoint(self):
        if self.card[1].isdigit():
            return int(self.card[1])
        else:
            if self.card[1] == "A":
                return 14
            elif self.card[1] == "K":
                return 13
            elif self.card[1] == "Q":
                return 12
            elif self.card[1] == "J":
                return 11

class Hand:
    """
    Hold
    """
    def __init__(self, cards):
        self.cards = self.sortCards(cards)

    def sortCards(self, cardArr):
        if cardArr[0].getPoint() < cardArr[1].getPoint():
            return [cardArr[1], cardArr[0]]
        return cardArr

    def isSameColor(self):
        return self.cards[0].color == self.cards[1].color

    def isPair(self):
        return self.cards[0].point == self.cards[1].point

    def isStrong(self):
        if self.isPair() and self.cards[0].getPoint() >= 9:
            return True
        elif self.cards[1].getPoint() >= 11:
            return True
        return False

class PokerAI:

    STRING_TO_SUIT = {
        "SPADES":0,
        "HEARTS":1,
        "CLUBS":2,
        "DIAMONDS":3
    }
    def __init__(self , hand=[], community=[]):
        self.hand=hand
        self.community=community
        self.bhand=tran_card_to_int(hand)
        self.bcommunity=tran_card_to_int(community)
        self.handarray=[0]*15
        self.communityarray=[0]*15
        self.handsuit=[0]*7
        self.csuit=[0]*7
        for card in hand:
            self.handarray[card[1]]=self.handarray[card[1]]+1
            self.handsuit[self.STRING_TO_SUIT[card[0]]]=self.handsuit[self.STRING_TO_SUIT[card[0]]]+1
        for card in community:
            self.communityarray[card[1]]=self.communityarray[card[1]]+1
            self.csuit[self.STRING_TO_SUIT[card[0]]]=self.csuit[self.STRING_TO_SUIT[card[0]]]+1
    def samesuit(self):
        ans=[self.csuit[i]+self.handsuit[i] for i in range(0,5)]
        for i in range(0,5):
            if self.csuit[i]==5:
                if(ans[i]==5):
                    return 'no'
                else:
                    return 'flush'
        for i in range(0,5):
            if ans[i]>=5:
                return 'flush'
        return "no"

    def pair(self):
        num = 0
        ans = [self.communityarray[i]+self.handarray[i] for i in range(0, 15)]
        for i in range(0,15):
            if(ans[i] >= 2):
                num = i
        if self.hand[0][1] == self.hand[1][1]:
            if self.bhand > self.bcommunity:
                return ('tpair', num)
            else:
                return ('pair', num)

        if((self.bhand&self.bcommunity) > self.bcommunity-(self.bhand&self.bcommunity)):
            return ('tpair', num)

        if self.bhand&self.bcommunity != 0:
            return ('pair', num)
        else:
            return ('no', num)

    def twopair(self):
        tcommunity = copy.copy(self.communityarray)
        handpairnum = 0;
        cpairnum = 0
        for i in range(0, 15):
            if tcommunity[i] == 2:
                cpairnum = cpairnum+1
        ans = [tcommunity[i]+self.handarray[i] for i in range(0, 15)]
        for i in range(0, 15):
            if ans[i] >= 2:
                handpairnum = handpairnum+1
        if handpairnum < 2:
            return 'no'
        if handpairnum > cpairnum:
            if self.bhand&self.bcommunity == self.bhand:
                return 'ttp'
            return 'tp'
        else:
            return 'no'

    def FullHouse(self):
        tcommunity=copy.copy(self.communityarray)
        pair=0
        three=0
        for i in range(0,15):
            if tcommunity[i]==2:
                pair=pair+1
            if tcommunity[i]==3:
                three=three+1
        if(pair&three):
            return 'no'

        ans=[tcommunity[i]+self.handarray[i] for i in range(0,15)]
        pair=0
        three=0
        for i in range(0,15):
            if ans[i]==2:
                pair=pair+1
            if ans[i]==3:
                three=three+1
        if(three>=1):
            if((pair+three)>=2):
                return 'hf'
        else:
            return 'no'
        return "no"

    def three(self):
        tcommunity=copy.copy(self.communityarray)
        for i in range(0,15):
            if tcommunity[i]>=3:
                tcommunity[i]=0
        ans=[tcommunity[i]+self.handarray[i] for i in range(0,15)]
        if max(ans)==3:
            return 'toak'
        else:
            return 'no'

    def four(self):
        tcommunity=copy.copy(self.communityarray)
        for i in range(0,15):
            if tcommunity[i]>=4:
                tcommunity[i]=0
        ans=[tcommunity[i]+self.handarray[i] for i in range(0,15)]
        if max(ans)==4:
            return 'foak'
        else:
            return 'no'
    def straight(self):
        mark=31<<9
        mark2=30<<9
        for i in range(0,10):
            if((mark>>i)&(self.bhand|self.bcommunity)==(mark>>i)):
                if((mark2>>i)&(self.bhand)>=0):
                    if((mark2>>i)&(self.bcommunity)!=(mark2>>i)):
                        return 'straight'
                    else:
                        return 'no'
                else:
                    return 'no'
        return 'no'

def tran_card_to_int(cardlist):
    ans = 0
    for card in cardlist:
        ans=1<<(card[1]-1)|ans
    if((ans&1<<13)!=0):
        ans = ans+1
    return ans

class Board:
    """
    Board Pokers
    """
    def __init__(self, cards):
        self.cards = cards

def preflopStrategy(hand, bigBlind, least_call):
    global hasRaised

    if least_call > 2000:
        if hand.isPair() and hand.cards[0].getPoint() >= 11:
            return 'all_in \n'
        else:
            return 'fold \n'
    elif least_call >= 200:
        if hand.isStrong():
            if not hasRaised:
                hasRaised = True
                return 'raise ' + str(3*bigBlind)+ ' \n'
            else:
                return 'call \n'
        else:
            return 'fold \n'
    else:
        return 'call \n'

def flopStrategy(hand, board, bigBlind, least_call):
    global preState, hasRaised

    handList = [(card.color, card.point) for card in hand.cards]
    boardList = [(card.color, card.point) for card in board.cards]

    ai = PokerAI(handList, boardList)

    value = 0

    print handList
    print '\n'
    print boardList
    print '\n'

    if ai.four() != "no":
        print "四条 \n"
        value = 90
    elif ai.FullHouse() != "no":
        print "葫芦 \n"
        value = 70 + hand.cards[1].point
    elif ai.samesuit() != "no":
        print "同花 \n"
        value = 60 + hand.cards[1].point
    elif ai.straight() != "no":
        print "顺子 \n"
        value = 50 + hand.cards[1].point
    elif ai.three() != "no":
        print "三条 \n"
        value = 40
    elif ai.twopair() == "ttp":
        print "两对 \n"
        value = 30
    elif ai.pair()[0] == "tpair":
        print "特殊的一对 \n"
        value = 20
    elif ai.pair()[0] == "pair":
        print "一对 \n"
        value = 15
    else:
        print "高牌 \n"
        value = hand.cards[0].point

    numOfCards = len(board.cards)
    multiplier = pow(2, numOfCards-3)

    bet = 0

    if value >= 70:
        bet = max(least_call, 5*bigBlind*multiplier)
        if not hasRaised:
            hasRaised = True
            return 'raise ' + str(bet)+ ' \n'
        else:
            return 'call \n'
    elif value >= 40:
        bet = max(least_call, 2*bigBlind*multiplier)
        if not hasRaised:
            hasRaised = True
            return 'raise ' + str(bet)+ ' \n'
        else:
            return 'call \n'
    elif value >= 30:
        """two pair"""
        if not hasRaised:
            hasRaised = True
            return 'raise ' + str(bigBlind*multiplier)+ ' \n'
        else:
            return 'call \n'
    elif value >= 20:
        """ttp and tpair"""
        if ai.pair()[1] > 10:
            if not hasRaised:
                hasRaised = True
                return 'raise ' + str(bigBlind*multiplier)+ ' \n'
            else:
                return 'call \n'
        elif least_call <= 500:
            if not hasRaised:
                hasRaised = True
                return 'raise ' + str(bigBlind)+ ' \n'
            else:
                return 'call \n'
        else:
            return 'fold \n'

    elif value < 13:
        """高牌"""
        """如果可以check就check"""
        if solo:
            if least_call <= 200:
                return 'call \n'
            else:
                return 'fold \n'
        else:
            if least_call <= 100:
                return 'call \n'
            else:
                return 'fold \n'
    elif value == 14:
        if least_call <= 100:
            return 'call \n'
        else:
            return 'fold \n'
    else:
        """分大对子和小对子"""
        """如果可以check就check"""
        """一对"""
        if solo:
            if ai.pair()[1] >= 7:
                if least_call <= 2000:
                    return 'call \n'
                else:
                    return 'fold \n'
            else:
                if least_call <= 200:
                    return 'call \n'
                else:
                    return 'fold \n'
        else:
            if ai.pair()[1] >= 10:
                if least_call <= 500:
                    return 'call \n'
                else:
                    return 'fold \n'
            else:
                if least_call <= 200:
                    return 'call \n'
                else:
                    return 'fold \n'


def prompt():
    sys.stdout.write('<End of Receiving>\n\n')
    sys.stdout.flush()

def splitPackage(data, s):
    packages = re.findall(r'[^\n]+/[^/]+[^\n]+\n', data)
    for package in packages:
        handle_msg(package, s)

def handle_msg(data, s):
    global state, bigBlind, numOfPlayers, preState, hasRaised, hold1, hold2, card1, card2, card3, card4, card5

    """Solve state """
    if data.split('\n')[0] == 'hold/ ':
        state = 'preflop'
        arr = data.split('\n')
        hold1 = Card(arr[1].split(' ')[0:2])
        hold2 = Card(arr[2].split(' ')[0:2])
    elif data.split('\n')[0] == 'flop/ ':
        state = 'flop'
        arr = data.split('\n')
        card1 = Card(arr[1].split(' ')[0:2])
        card2 = Card(arr[2].split(' ')[0:2])
        card3 = Card(arr[3].split(' ')[0:2])
    elif data.split('\n')[0] == 'turn/ ':
        state = 'turn'
        arr = data.split('\n')
        card4 = Card(arr[1].split(' ')[0:2])
    elif data.split('\n')[0] == 'river/ ':
        state = 'river'
        arr = data.split('\n')
        card5 = Card(arr[1].split(' ')[0:2])

    if data.split('\n')[0] == 'blind/ ':
        arr = data.split('\n')[1:-2]
        bigBlind = max([int(player.split(' ')[1]) for player in arr])
    """计算玩家数量"""
    if data.split('\n')[0] == 'seat/ ':
        arr = data.split('\n')[1:-2]
        numOfPlayers = len(arr)
        if numOfPlayers == 2:
            solo = True

    """Give Action"""
    if data.split('\n')[0] == 'inquire/ ':
        if preState != state:
            hasRaised = False

        arr = data.split('\n')[1:-3]
        least_call = max([int(player.split(' ')[3]) for player in arr])
        hand = Hand([hold1, hold2])


        if state == 'preflop':
            strategy = preflopStrategy(hand, bigBlind, least_call)
        elif state == 'flop':
            board = Board([card1, card2, card3])
            strategy = flopStrategy(hand, board, bigBlind, least_call)
        elif state == 'turn':
            board = Board([card1, card2, card3, card4])
            strategy = flopStrategy(hand, board, bigBlind, least_call)
        elif state == 'river':
            board = Board([card1, card2, card3, card4, card5])
            strategy = flopStrategy(hand, board, bigBlind, least_call)

        print "My action: "+strategy+"\n\n"
        preState = state
        s.sendall(strategy)

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.settimeout(2)
    s.bind((player_ip, player_port))

    try:
        s.connect((server_ip, server_port))
    except Exception as err:
        print 'Unable to connect to server: %s:%s' % (server_ip, server_port)
        print err

    print 'Connected to remote host. Start sending register message.'
    s.send('reg: ' + player_id + ' sweet' + ' need_notify \n')
    while True:
        rlist = [sys.stdin, s]
        read_list, write_list, error_list = select.select(rlist, [], [])

        for sock in read_list:
            if sock == s:
                data = sock.recv(RECV_BUFFER)
                if not data:
                    print '\nDisconnected from chat server'
                    sys.exit()
                elif data == 'game-over \n':
                    s.close()
                    print 'Game Over.'
                    sys.exit()
                else:
                    sys.stdout.write('<Start of Receiving>\n')
                    sys.stdout.write(data)
                    prompt()
                    splitPackage(data, s)
                    #handle_msg(data, s)
            else:
                pass

if __name__ == '__main__':
    #ai = PokerAI([('HEARTS', 4), ('SPADES', 3)], [('HEARTS', 3), ('CLUBS', 11), ('CLUBS', 13)])
    #print ai.pair()
    main()
