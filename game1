#!/usr/bin/env python
# -*- coding:utf-8 -*-

import sys
import socket
import select
import re

argv = sys.argv
server_ip = argv[1]
server_port = int(argv[2])
player_ip = argv[3]
player_port = int(argv[4])
player_id = argv[5]

RECV_BUFFER = 4096

class Card:
    """
    Poker Card
    """
    def __init__(self, card):
        self.card = card
        self.point = self.getPoint()
        self.color = card[0]

    def getPoint(self):
        if self.card[1].isdigit():
            return int(self.card[1])
        else:
            if self.card[1] == "A":
                return 14
            elif self.card[1] == "K":
                return 13
            elif self.card[1] == "Q":
                return 12
            elif self.card[1] == "J":
                return 11

class Hand:
    """
    Hold
    """
    def __init__(self, cards):
        self.cards = cards
        self.cards = self.sortCards(self.cards)

    def sortCards(self, cardArr):
        if cardArr[0].getPoint() < cardArr[1].getPoint():
            return [cardArr[1], cardArr[0]]
        return cardArr

    def isPair(self):
        if self.cards[0].getPoint() == self.cards[1].getPoint():
            return True
        else:
            return False

    def isStrong(self):
        if self.isPair() and self.cards[0].getPoint() >= 9:
            return True
        elif self.cards[1].getPoint() >= 11:
            return True
        return False

def preflopStrategy(hand, least_call):
    print "Least call is "+str(least_call)+"\n"
    print "My Card: "
    print hand.cards
    print "\n"

    if least_call > 500:
        if hand.isPair() and hand.cards[0].getPoint() >= 11:
            return 'all_in \n'
        else:
            return 'fold \n'
    elif hand.isStrong():
        return 'raise '+str(4*least_call)+' \n'
    else:
        return 'call \n'

def prompt():
    sys.stdout.write('<End of Receiving>\n\n')
    sys.stdout.flush()

def splitPackage(data, s):
    packages = re.findall(r'[^\n]+/[^/]+[^\n]+\n', data)
    for package in packages:
        handle_msg(package, s)

def handle_msg(data, s):
    global state, card1, card2, card3, card4, card5
    """Solve state """
    if data.split('\n')[0] == 'hold/ ':
        state = 'preflop'
        arr = data.split('\n')
        card1 = Card(arr[1].split(' ')[0:2])
        card2 = Card(arr[2].split(' ')[0:2])
    elif data.split('\n')[0] == 'flop/ ':
        state = 'flop'
        arr = data.split('\n')
        card3 = Card(arr[1].split(' ')[0:2])
        card4 = Card(arr[2].split(' ')[0:2])
        card5 = Card(arr[3].split(' ')[0:2])
    elif data.split('\n')[0] == 'turn/ ':
        state = 'turn'
    elif data.split('\n')[0] == 'river/ ':
        state = 'river'

    if data.split('\n')[0] == 'inquire/ ':
        arr = data.split('\n')[1:-3]
        least_call = max([int(player.split(' ')[3]) for player in arr])
        if state == 'preflop':
            temp = preflopStrategy(Hand([card1, card2]), least_call)
            s.sendall(temp)
            print "My action: "+temp+"\n\n"
        elif state == 'flop':
            bestCommonCard = 0
            bestPair = 0

            pairArr = [card3, card4, card5]
            bestCommonCard = max(card3.getPoint(), card4.getPoint(), card5.getPoint())
            for card in pairArr:
                if card.getPoint() == card1.getPoint() or card.getPoint() == card2.getPoint():
                    bestPair = max(bestPair, card.getPoint())
            if bestPair == 0:
                if least_call <= 250:
                    s.sendall('call \n')
                else:
                    s.sendall('fold \n')
            elif bestPair == bestCommonCard:
                s.sendall('all_in \n')
            elif least_call <= 500:
                s.sendall('call \n')
        elif state == 'turn':
            if least_call <= 500:
                s.sendall('call \n')
            else:
                s.sendall('fold \n')
        elif state == 'river':
            if least_call <= 500:
                s.sendall('call \n')
            else:
                s.sendall('fold \n')

def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.settimeout(2)
    s.bind((player_ip, player_port))

    try:
        s.connect((server_ip, server_port))
    except Exception as err:
        print 'Unable to connect to server: %s:%s' % (server_ip, server_port)
        print err

    print 'Connected to remote host. Start sending register message.'
    s.send('reg: ' + player_id + ' sweet' + ' need_notify \n')
    while True:
        rlist = [sys.stdin, s]
        read_list, write_list, error_list = select.select(rlist, [], [])

        for sock in read_list:
            if sock == s:
                data = sock.recv(RECV_BUFFER)
                if not data:
                    print '\nDisconnected from chat server'
                    sys.exit()
                elif data == 'game-over \n':
                    s.close()
                    print 'Game Over.'
                    sys.exit()
                else:
                    sys.stdout.write('<Start of Receiving>\n')
                    sys.stdout.write(data)
                    prompt()
                    splitPackage(data, s)
                    #handle_msg(data, s)
            else:
                pass

if __name__ == '__main__':
    main()
